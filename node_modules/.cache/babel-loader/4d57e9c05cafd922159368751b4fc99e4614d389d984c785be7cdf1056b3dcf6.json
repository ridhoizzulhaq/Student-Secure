{"ast":null,"code":"\"use strict\";\n\n/**\n * Returns a Promise that resolves to the value of window.ethereum if it is\n * set within the given timeout, or null.\n * The Promise will not reject, but an error will be thrown if invalid options\n * are provided.\n *\n * @param options - Options bag.\n * @param options.mustBeMetaMask - Whether to only look for MetaMask providers.\n * Default: false\n * @param options.silent - Whether to silence console errors. Does not affect\n * thrown errors. Default: false\n * @param options.timeout - Milliseconds to wait for 'ethereum#initialized' to\n * be dispatched. Default: 3000\n * @returns A Promise that resolves with the Provider if it is detected within\n * given timeout, otherwise null.\n */\nfunction detectEthereumProvider() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    _ref$mustBeMetaMask = _ref.mustBeMetaMask,\n    mustBeMetaMask = _ref$mustBeMetaMask === void 0 ? false : _ref$mustBeMetaMask,\n    _ref$silent = _ref.silent,\n    silent = _ref$silent === void 0 ? false : _ref$silent,\n    _ref$timeout = _ref.timeout,\n    timeout = _ref$timeout === void 0 ? 3000 : _ref$timeout;\n  _validateInputs();\n  var handled = false;\n  return new Promise(function (resolve) {\n    if (window.ethereum) {\n      handleEthereum();\n    } else {\n      window.addEventListener('ethereum#initialized', handleEthereum, {\n        once: true\n      });\n      setTimeout(function () {\n        handleEthereum();\n      }, timeout);\n    }\n    function handleEthereum() {\n      if (handled) {\n        return;\n      }\n      handled = true;\n      window.removeEventListener('ethereum#initialized', handleEthereum);\n      var _window = window,\n        ethereum = _window.ethereum;\n      if (ethereum && (!mustBeMetaMask || ethereum.isMetaMask)) {\n        resolve(ethereum);\n      } else {\n        var message = mustBeMetaMask && ethereum ? 'Non-MetaMask window.ethereum detected.' : 'Unable to detect window.ethereum.';\n        !silent && console.error('@metamask/detect-provider:', message);\n        resolve(null);\n      }\n    }\n  });\n  function _validateInputs() {\n    if (typeof mustBeMetaMask !== 'boolean') {\n      throw new Error(\"@metamask/detect-provider: Expected option 'mustBeMetaMask' to be a boolean.\");\n    }\n    if (typeof silent !== 'boolean') {\n      throw new Error(\"@metamask/detect-provider: Expected option 'silent' to be a boolean.\");\n    }\n    if (typeof timeout !== 'number') {\n      throw new Error(\"@metamask/detect-provider: Expected option 'timeout' to be a number.\");\n    }\n  }\n}\nmodule.exports = detectEthereumProvider;","map":{"version":3,"names":["detectEthereumProvider","_ref","arguments","length","undefined","_ref$mustBeMetaMask","mustBeMetaMask","_ref$silent","silent","_ref$timeout","timeout","_validateInputs","handled","Promise","resolve","window","ethereum","handleEthereum","addEventListener","once","setTimeout","removeEventListener","_window","isMetaMask","message","console","error","Error","module","exports"],"sources":["/Users/ridhoizzulhaq/Documents/GitHub/Student-Secure/node_modules/@metamask/detect-provider/src/index.ts"],"sourcesContent":["interface MetaMaskEthereumProvider {\n  isMetaMask?: boolean;\n  once(eventName: string | symbol, listener: (...args: any[]) => void): this;\n  on(eventName: string | symbol, listener: (...args: any[]) => void): this;\n  off(eventName: string | symbol, listener: (...args: any[]) => void): this;\n  addListener(eventName: string | symbol, listener: (...args: any[]) => void): this;\n  removeListener(eventName: string | symbol, listener: (...args: any[]) => void): this;\n  removeAllListeners(event?: string | symbol): this;\n}\n\ninterface Window {\n  ethereum?: MetaMaskEthereumProvider;\n}\n\nexport = detectEthereumProvider;\n\n/**\n * Returns a Promise that resolves to the value of window.ethereum if it is\n * set within the given timeout, or null.\n * The Promise will not reject, but an error will be thrown if invalid options\n * are provided.\n *\n * @param options - Options bag.\n * @param options.mustBeMetaMask - Whether to only look for MetaMask providers.\n * Default: false\n * @param options.silent - Whether to silence console errors. Does not affect\n * thrown errors. Default: false\n * @param options.timeout - Milliseconds to wait for 'ethereum#initialized' to\n * be dispatched. Default: 3000\n * @returns A Promise that resolves with the Provider if it is detected within\n * given timeout, otherwise null.\n */\nfunction detectEthereumProvider<T = MetaMaskEthereumProvider>({\n  mustBeMetaMask = false,\n  silent = false,\n  timeout = 3000,\n} = {}): Promise<T | null> {\n\n  _validateInputs();\n\n  let handled = false;\n\n  return new Promise((resolve) => {\n    if ((window as Window).ethereum) {\n\n      handleEthereum();\n\n    } else {\n\n      window.addEventListener(\n        'ethereum#initialized',\n        handleEthereum,\n        { once: true },\n      );\n\n      setTimeout(() => {\n        handleEthereum();\n      }, timeout);\n    }\n\n    function handleEthereum() {\n\n      if (handled) {\n        return;\n      }\n      handled = true;\n\n      window.removeEventListener('ethereum#initialized', handleEthereum);\n\n      const { ethereum } = window as Window;\n\n      if (ethereum && (!mustBeMetaMask || ethereum.isMetaMask)) {\n        resolve(ethereum as unknown as T);\n      } else {\n\n        const message = mustBeMetaMask && ethereum\n          ? 'Non-MetaMask window.ethereum detected.'\n          : 'Unable to detect window.ethereum.';\n\n        !silent && console.error('@metamask/detect-provider:', message);\n        resolve(null);\n      }\n    }\n  });\n\n  function _validateInputs() {\n    if (typeof mustBeMetaMask !== 'boolean') {\n      throw new Error(`@metamask/detect-provider: Expected option 'mustBeMetaMask' to be a boolean.`);\n    }\n    if (typeof silent !== 'boolean') {\n      throw new Error(`@metamask/detect-provider: Expected option 'silent' to be a boolean.`);\n    }\n    if (typeof timeout !== 'number') {\n      throw new Error(`@metamask/detect-provider: Expected option 'timeout' to be a number.`);\n    }\n  }\n}\n"],"mappings":";;AAgBA;;;;;;;;;;;;;;;;AAgBA,SAASA,sBAAsBA,CAAA,EAIzB;EAAA,IAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAF,EAAE;IAAAG,mBAAA,GAAAJ,IAAA,CAHJK,cAAc;IAAdA,cAAc,GAAAD,mBAAA,cAAG,KAAK,GAAAA,mBAAA;IAAAE,WAAA,GAAAN,IAAA,CACtBO,MAAM;IAANA,MAAM,GAAAD,WAAA,cAAG,KAAK,GAAAA,WAAA;IAAAE,YAAA,GAAAR,IAAA,CACdS,OAAO;IAAPA,OAAO,GAAAD,YAAA,cAAG,IAAI,GAAAA,YAAA;EAGdE,eAAe,EAAE;EAEjB,IAAIC,OAAO,GAAG,KAAK;EAEnB,OAAO,IAAIC,OAAO,CAAC,UAACC,OAAO,EAAI;IAC7B,IAAKC,MAAiB,CAACC,QAAQ,EAAE;MAE/BC,cAAc,EAAE;KAEjB,MAAM;MAELF,MAAM,CAACG,gBAAgB,CACrB,sBAAsB,EACtBD,cAAc,EACd;QAAEE,IAAI,EAAE;MAAI,CAAE,CACf;MAEDC,UAAU,CAAC,YAAK;QACdH,cAAc,EAAE;MAClB,CAAC,EAAEP,OAAO,CAAC;;IAGb,SAASO,cAAcA,CAAA;MAErB,IAAIL,OAAO,EAAE;QACX;;MAEFA,OAAO,GAAG,IAAI;MAEdG,MAAM,CAACM,mBAAmB,CAAC,sBAAsB,EAAEJ,cAAc,CAAC;MAElE,IAAAK,OAAA,GAAqBP,MAAgB;QAA7BC,QAAQ,GAAAM,OAAA,CAARN,QAAQ;MAEhB,IAAIA,QAAQ,KAAK,CAACV,cAAc,IAAIU,QAAQ,CAACO,UAAU,CAAC,EAAE;QACxDT,OAAO,CAACE,QAAwB,CAAC;OAClC,MAAM;QAEL,IAAMQ,OAAO,GAAGlB,cAAc,IAAIU,QAAQ,GACtC,wCAAwC,GACxC,mCAAmC;QAEvC,CAACR,MAAM,IAAIiB,OAAO,CAACC,KAAK,CAAC,4BAA4B,EAAEF,OAAO,CAAC;QAC/DV,OAAO,CAAC,IAAI,CAAC;;IAEjB;EACF,CAAC,CAAC;EAEF,SAASH,eAAeA,CAAA;IACtB,IAAI,OAAOL,cAAc,KAAK,SAAS,EAAE;MACvC,MAAM,IAAIqB,KAAK,gFAAgF;;IAEjG,IAAI,OAAOnB,MAAM,KAAK,SAAS,EAAE;MAC/B,MAAM,IAAImB,KAAK,wEAAwE;;IAEzF,IAAI,OAAOjB,OAAO,KAAK,QAAQ,EAAE;MAC/B,MAAM,IAAIiB,KAAK,wEAAwE;;EAE3F;AACF;AAlFAC,MAAA,CAAAC,OAAA,GAAS7B,sBAAsB"},"metadata":{},"sourceType":"script","externalDependencies":[]}